#version 330 core

in vec3 normal;
in vec3 position;


in vec3 Ka_frag;
in vec3 Kd_frag;
in vec3 Ks_frag;
in float S_frag;

layout(location = 0) out vec4 fragColor;

struct Light
{
    vec4 position;
    vec3 intensity;
};

uniform Light light;


void main()
{
    // n and s are used to compute cos(theta), which is the angle between the surface normal and the incoming light which affets the diffusion, hence the color
    vec3 n = normalize(normal);
    vec3 s = normalize(light.position.xyz - position);
    //position of the point in camera frame of ref
    vec3 v = normalize(-position.xyz);
    vec4 h = normalize(v + s);

    float sdn = dot(s,n);
    vec3 ambient = Ka_frag;
    vec3 diffuse = Kd_frag * max(sdn,0.0);
    vec3 specular = Ks_frag * mix(0.0, pow(dot(h,n), S_frag), step(0.0,sdn));

    fragColor = vec4(light.intensity * (ambient+diffuse+specular),1);

}
