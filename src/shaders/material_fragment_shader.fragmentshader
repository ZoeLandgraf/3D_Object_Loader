#version 330 core

in vec3 normal;
in vec3 position;



layout(location = 0) out vec4 fragColor;

struct Light
{
    vec4 position;
    vec3 intensity;
};

uniform Light light;


void main()
{

    vec3 light_intensity = vec3(1.0,1.0,1.0);
    vec4 light_position = vec4(-1.0,-1.0,1.0,1.0);

    // n and s are used to compute cos(theta), which is the angle between the surface normal and the incoming light which affets the diffusion, hence the color
    vec3 n = normalize(normal);
    vec3 s = normalize(light_position.xyz - position);
    //position of the point in camera frame of ref
    vec3 v = normalize(-position.xyz);
    vec3 h = normalize((v + s));

    vec4 distance_hom = vec4(position,1) - (light_position);
    vec3 distance = distance_hom.xyz;

    float sdn = dot(s,n);

    vec3 diffuse_colour = vec3(0.5,0.0,0.0);
    vec3 diffuse = diffuse_colour * max(sdn,0.0);

    vec3 lightcolor = vec3(1.0,1.0,1.0);
    fragColor = vec4(lightcolor * light_intensity * (diffuse),1) / (distance_hom*distance_hom);

}
